package com.datanexus.datanexus_backend;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;

import jakarta.annotation.PostConstruct; // Use jakarta for Spring Boot 3+
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.UUID;

@Service
public class FileStorageService {

    private static final Logger logger = LoggerFactory.getLogger(FileStorageService.class);

    @Value("${file.upload-dir}") // Inject the upload directory path from application.properties
    private String uploadDir;

    private Path uploadPath;

    @PostConstruct // Executed after the bean is created and dependencies injected
    public void init() {
        try {
            uploadPath = Paths.get(uploadDir).toAbsolutePath().normalize();
            Files.createDirectories(uploadPath); // Create directory if it doesn't exist
            logger.info("Upload directory configured: {}", uploadPath);
        } catch (IOException e) {
            logger.error("Could not create upload directory: {}", uploadDir, e);
            // Handle error appropriately - maybe throw exception to prevent app startup?
            throw new RuntimeException("Could not initialize storage location: " + uploadDir, e);
        }
    }

    public String storeFile(MultipartFile file) throws IOException {
        String originalFileName = StringUtils.cleanPath(file.getOriginalFilename());
        String fileExtension = "";

        // Basic input validation
        if (originalFileName.contains("..")) {
            throw new IOException("Filename contains invalid path sequence " + originalFileName);
        }
        if (file.isEmpty()) {
             throw new IOException("Failed to store empty file " + originalFileName);
        }

        try {
            // Generate a unique filename to avoid collisions
            int dotIndex = originalFileName.lastIndexOf('.');
            if (dotIndex > 0) {
                fileExtension = originalFileName.substring(dotIndex); // Includes the dot
            }
            String uniqueFileName = UUID.randomUUID().toString() + fileExtension;

            // Resolve the destination path
            Path targetLocation = this.uploadPath.resolve(uniqueFileName);

            // Copy the file to the target location (Replacing existing file with the same name if any)
            try (InputStream inputStream = file.getInputStream()) {
                Files.copy(inputStream, targetLocation, StandardCopyOption.REPLACE_EXISTING);
                logger.info("Stored file: {}", uniqueFileName);
                return uniqueFileName; // Return the unique name used for storing
            }
        } catch (IOException ex) {
            logger.error("Could not store file {}: {}", originalFileName, ex.getMessage());
            throw new IOException("Could not store file " + originalFileName + ". Please try again!", ex);
        }
    }

    public Path getUploadPath() {
        return uploadPath;
    }
}